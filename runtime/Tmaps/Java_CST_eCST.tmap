// first rule : receives "root"
"ruleinitial" -> {
    rule("rule_compilation_unit", children("CompilationUnit"))
}

// handle with each compilation unit : receives "CompilationUnit"
"rule_compilation_unit" -> {
    "COMPILATION_UNIT" = {
        "PACKAGE_DECL" = {
            ? "NAME" = {
                "PackageDeclaration"."PackageName".child
            },
            ? rule("rule_import_declaration", children("ImportDeclaration")),            
            "CONCRETE_UNIT_DECL" = {
                rule("rule_class_declaration", "TypeDeclaration"."ClassDeclaration"."NormalClassDeclaration")                
            }
        }
    }
}

// handle with the import action : receives "ImportDeclaration"
"rule_import_declaration" -> {
    "IMPORT_DECL" = {
        "NAME" = {
            rule("rule_import_name", "SingleTypeImportDeclaration"."TypeName")
        }
    }
}

// handle with the name(s) for a import : receives "TypeName"
"rule_import_name" -> {
    if (first_child != last_child){
        "NAME" = {
            if (first_child == :"PackageOrTypeName"){
                rule("rule_import_name", "PackageOrTypeName")
            } else {
                first_child
            } 
        },
        new_leaf("."),
        "NAME" = {
            last_child
        }
    } else {       
        last_child        
    }     
}

// if the file contains a Class, call this rule : receives "NormalClassDeclaration"
"rule_class_declaration" -> {
    "NAME" = {
        "ClassName".child
    },        
    rule ("rule_class_body", "ClassBody")
}

// handle with all types of declaration/structures in the class body : receives "ClassBody"
"rule_class_body" -> {
    new_leaf("{"),
    ? rule("rule_class_body_declaration", children("ClassBodyDeclaration")),
    new_leaf("}")
}

// handle with each of declarations in class body : receives "ClassBodyDeclaration"
"rule_class_body_declaration" -> {
    ? rule("rule_constructor_declaration", children("ConstructorDeclaration")),
    ? rule("rule_class_member_declaration", children("ClassMemberDeclaration"))
}

// handle with constructors : receives "ConstructorDeclaration"
"rule_constructor_declaration" -> {
    "FUNCTION_DECL" = {
        "MODIFIER_LIST" = {
            ? "ConstructorModifier".child
        },
        "TYPE" = {
            new_leaf("void")
        },
        "NAME" = {
            "ConstructorDeclarator"."SimpleTypeName".child
        },
        "FORMAL_PARAM_LIST" = {
            ? rule("rule_parameter_declaration", "ConstructorDeclarator"."FormalParameterList")
        },
        "BLOCK_SCOPE" = {
            "SEPARATOR" = {
                new_leaf("{")
            },
            ? rule("rule_block_construc_invoke", "ConstructorBody"."ExplicitConstructorInvocation"),
            ? rule("rule_block_scope", "ConstructorBody"."BlockStatements".children("BlockStatement")),            
            "SEPARATOR" = {
                new_leaf("}")
            }
        }
    }
}

// handle with fields and methods in classes : receives "ClassMemberDeclaration"
"rule_class_member_declaration" -> {
    ? rule("rule_field_declaration", "FieldDeclaration"),    
    ? rule("rule_method_declaration", "MethodDeclaration")    
}

// handle with each method in a class : receives "MethodDeclaration"
"rule_method_declaration" -> {
    "FUNCTION_DECL" = {
        "MODIFIER_LIST" = {
            ? rule("rule_field_modifier", children("MethodModifier"))
        },
        "TYPE" = {
            "MethodHeader"."Result".last
        },
        "NAME" = {
            "MethodHeader"."MethodDeclarator"."MethodDeclaratorID".child
        },
        "FORMAL_PARAM_LIST" = {
            ? rule("rule_parameter_declaration", "MethodHeader"."MethodDeclarator"."FormalParameterList")
        },
        "BLOCK_SCOPE" = {
            "SEPARATOR" = {
                new_leaf("{")
            },            
            ? rule("rule_block_scope", "MethodBody"."Block"."BlockStatements".children("BlockStatement")),            
            "SEPARATOR" = {
                new_leaf("}")
            }
        }
    }
}

// handle with each field in a class : receives "FieldDeclaration"
"rule_field_declaration" -> {
    "ATTRIBUTE_DECL" = {
        "MODIFIER_LIST" = {
            ? rule("rule_field_modifier", children("FieldModifier"))
        },
        "TYPE" = {
            if ("UnannType".last == :"UnannArrayType"){
                "UnannType".last."UnannPrimitiveType".last
            } else{
               "UnannType".last 
            }
        },        
        "NAME" = {
            ? "VariableDeclaratorList"."VariableDeclarator"."VariableDeclaratorId".child,
            ? "VariableDeclaratorList"."VariableDeclarator"."VariableDeclaratorComplex"."VariableDeclaratorId".child
        },
        if ("UnannType".last == :"UnannArrayType"){
            "SEPARATOR" = {
                new_leaf("[")
            },
            "SEPARATOR" = {
                new_leaf("]")
            }
        },
        "VALUE" = {
            ? rule("rule_assignment_value", "VariableDeclaratorList"."VariableDeclarator"."VariableDeclaratorComplex"."VariableInitializer".last.parent.parent)            
        }
    }    
}

// return each modifier of a field in a class : receives "FieldModifier"
"rule_field_modifier" -> {
    child
}

// handle with a list of parameters for a constructor : receives "FormalParameterList"
"rule_parameter_declaration" -> {
    ? rule("rule_formal_parameters", any children)
}

// a step to all formal parameters : receives "FormalParameters" or "LastFormalParameters"
"rule_formal_parameters" -> {
    rule("rule_formal_parameter", children("FormalParameter"))
}

// handle with each formal parameter : receives "FormalParameter"
"rule_formal_parameter" -> {
    "PARAMETER_DECL" = {
        new_leaf("MODIFIER_LIST"),
        "TYPE" = {   
            if ("UnannType".last == :"UnannArrayType"){
                "NAME" = {
                    rule("rule_array_parameter", "UnannType".last)
                }
            } else {
                if ("UnannType".last.parent == :"UnannClassType_lfno_unannClassOrInterfaceType"){
                    "NAME" = {
                        rule("rule_array_parameter", "UnannType".last)
                    }
                } else {                   
                    rule("rule_array_parameter", "UnannType".last)                    
                }
            }                                      
        },
        if ("UnannType".last == :"UnannArrayType"){
            "SEPARATOR" = {
                new_leaf("[")
            },
            "SEPARATOR" = {
                new_leaf("]")
            }
        },
        if ("VariableDeclaratorId".last == :"VariableDeclaratorId"){
            "NAME" = {
                "VariableDeclaratorId".child(0)               
            },
             "SEPARATOR" = {
                new_leaf("[")
            },
            "SEPARATOR" = {
                new_leaf("]")
            }
        } else {
            "NAME" = {
                "VariableDeclaratorId".last
            }   
        } 
    }
}

// handle with a array for a method : receives "UnannType".last
"rule_array_parameter" -> {
    if (parent.child == :"UnannArrayType"){
        child(0).last      
    } else {
        current_node
    }    
}

// handle with a constructor call inside a block scope : receives "ExplicitConstructorInvocation"
"rule_block_construc_invoke" -> {
    "CONSTRUCTOR_CALL" = {
        "NAME" = {
            "ConstructorInvocationTS".child
        },
        "ARGUMENT_LIST" = {
            "SEPARATOR" = {
                new_leaf("(")
            },
            ? rule("rule_assignment_method_arguments", "ArgumentList".children("Expression")),
            "SEPARATOR" = {
                new_leaf(")")
            }
        }
    }
}

// handle with the whole block scope : receives "BlockStatement"
"rule_block_scope" -> {
    ? rule("rule_statement", child),
    ? rule("rule_local_variable_declaration_statement", child)
}

// handle with a block statement that does not create a new local variable : receives "Statement"
"rule_statement" -> {
    ? rule("rule_statement_without_trailing_substatement", child),
    ? rule("rule_if_then_else_statement", "IfThenElseStatement"),
    ? rule("rule_if_then_statement", "IfThenStatement"),
    ? rule("rule_for_statement", "ForStatement"."BasicForStatement"),
    ? rule("rule_while_statement", "WhileStatement")
}

// handle with a do-while statement : receives "DoStatement"
"rule_do_while_statement" -> {
     "LOOP_STATEMENT" = {
        "KEYWORD" = {
            new_leaf("do")
        },               
        "BLOCK_SCOPE" = {
            "SEPARATOR" = {
                new_leaf("{")
            },
            ? rule("rule_block_scope", "Statement".last."BlockStatements".children("BlockStatement")),            
            "SEPARATOR" = {
                new_leaf("}")
            }
        },
        rule("rule_for_condition", "Expression")
    }
}

// handle with a while loop : receives "WhileStatement"
"rule_while_statement" -> {
    "LOOP_STATEMENT" = {
        "KEYWORD" = {
            new_leaf("while")
        },        
        rule("rule_for_condition", "Expression"),
        "BLOCK_SCOPE" = {
            "SEPARATOR" = {
                new_leaf("{")
            },
            ? rule("rule_block_scope", "Statement".last."BlockStatements".children("BlockStatement")),            
            "SEPARATOR" = {
                new_leaf("}")
            }
        }
    }
}

// handle with a for loop : receives "BasicForStatement"
"rule_for_statement" -> {
    "LOOP_STATEMENT" = {
        "KEYWORD" = {
            new_leaf("for")
        },
        ? rule("rule_for_init", "ForInit"),
        ? rule("rule_for_condition", "Expression"),
        ? rule("rule_for_step", "ForUpdate"),
        "BLOCK_SCOPE" = {
            "SEPARATOR" = {
                new_leaf("{")
            },
            ? rule("rule_block_scope", "Statement".last."BlockStatements".children("BlockStatement")),            
            "SEPARATOR" = {
                new_leaf("}")
            }
        }
    }
}

// handle with the update statement of a loop : receives "ForUpdate"
"rule_for_step" -> {
    "STEP" = {
        ? rule("rule_assignment", last),
        ? "ASSIGNMENT_STATEMENT" = {
            "NAME" = {
               last."PostfixExpression".last 
            },
            "OPERATOR" = {
                rule("rule_for_++_--", last)
            }            
        }
    }
}

// handle with a ++ or -- in a loop : receives "ForUpdate".last
"rule_for_++_--" -> {
    ? "++",
    ? "--"
}

// handle with a CONDITION statement for a for a LOOP_STATEMENT : receives "Expression"
"rule_for_condition" -> {
    "CONDITION" = {
        "SEPARATOR" = {
            new_leaf("(")
        },
        rule("rule_assignment_value", last.parent.parent),
        "SEPARATOR" = {
            new_leaf(")")
        }
    }
}

// handle with the INIT section of a LOOP_STATEMENT : receives "ForInit"
"rule_for_init" -> {
    "INIT" = {
        ? rule("rule_local_variable_declaration_statement", current_node),
        ? rule("rule_assignment", last)
    }
}

// handle with a if statement : receives "IfThenStatement"
"rule_if_then_statement" -> {
    "BRANCH_STATEMENT" = {
        "BRANCH" = {
            "KEYWORD" = {
                new_leaf("if")
            },
            "CONDITION" = {
                "SEPARATOR" = {
                    new_leaf("(")
                },
                rule("rule_assignment_value", "Expression".last.parent.parent),
                "SEPARATOR" = {
                    new_leaf(")")
                }
            },
            "BLOCK_SCOPE" = {
                "SEPARATOR" = {
                    new_leaf("{")
                },
                ? rule("rule_block_scope", "Statement".last."BlockStatements".children("BlockStatement")),            
                "SEPARATOR" = {
                    new_leaf("}")
                }
            }
        }
    }
}

// handle with a if/else statement : receives "IfThenElseStatement"
"rule_if_then_else_statement" -> {
    "BRANCH_STATEMENT" = {
        "BRANCH" = {
            "KEYWORD" = {
                new_leaf("if")
            },
            "CONDITION" = {
                "SEPARATOR" = {
                    new_leaf("(")
                },
                rule("rule_assignment_value", "Expression".last.parent.parent),
                "SEPARATOR" = {
                    new_leaf(")")
                }
            },
            "BLOCK_SCOPE" = {
                "SEPARATOR" = {
                    new_leaf("{")
                },
                ? rule("rule_block_scope", "StatementNoShortIf".last."BlockStatements".children("BlockStatement")),            
                "SEPARATOR" = {
                    new_leaf("}")
                }
            }
        },
        "BRANCH" = {
            "KEYWORD" = {
                new_leaf("else")
            },            
            "BLOCK_SCOPE" = {
                "SEPARATOR" = {
                    new_leaf("{")
                },
                ? rule("rule_block_scope", "Statement".last."BlockStatements".children("BlockStatement")),            
                "SEPARATOR" = {
                    new_leaf("}")
                }
            }
        }
    }
}

// handle with a Expression statement like an Assignment for example : receives "StatementWithoutTrailingSubstatement"
"rule_statement_without_trailing_substatement" -> {
    ? rule("rule_expression_statement", child."StatementExpression"),
    ? rule("rule_return_statement", "ReturnStatement"),
    ? rule("rule_break_statement", "BreakStatement"),
    ? rule("rule_do_while_statement", "DoStatement")
}

// handle with the break statement in a block : receives "BreakStatement"
"rule_break_statement" -> {
    "JUMP_STATEMENT" = {
        "KEYWORD" = {
            new_leaf("break")
        }       
    }
}

// handle with the return statement in a block : receives "ReturnStatement"
"rule_return_statement" -> {
    "JUMP_STATEMENT" = {
        "KEYWORD" = {
            new_leaf("return")
        },
        ? rule("rule_assignment_value", "Expression".last.parent.parent)
    }
}

// handle with the creation of a new local variable in a block scope : receives "LocalVariableDeclarationStatement"
"rule_local_variable_declaration_statement" -> {
    "VAR_DECL" = {
        new_leaf("MODIFIER_LIST"),
        "TYPE" = {
            "NAME" = {
                "LocalVariableDeclaration"."UnannType".last
            }
        },    
        rule("rule_local_variable_name_assignment", "LocalVariableDeclaration"."VariableDeclaratorList")
    }    
}

// handle with local variable names or a Assignment : receives "VariableDeclaratorList"
"rule_local_variable_name_assignment" -> {
    ? "NAME" = {
        last.parent.parent."VariableDeclaratorId".child
    },
    ? "ASSIGNMENT_STATEMENT" = {
        "ASSIGN_OPERATOR" = {
            new_leaf("="),
            "NAME" = {
                last.parent."VariableDeclaratorComplex"."VariableDeclaratorId".child
            },
            "VALUE" = {
                ? rule("rule_assignment_value", "VariableDeclarator"."VariableDeclaratorComplex"."VariableInitializer"."Expression".last.parent.parent),
                ? rule("rule_assignment_value_attr_call", "VariableDeclarator"."VariableDeclaratorComplex"."VariableInitializer"."Expression".last.parent."ExpressionName")
            }
        }        
    }
}

// handle with a Statement Expression from a StatementWithoutTrailingSubstatement : receives "StatementExpression"
"rule_expression_statement" -> {
    ? rule("rule_assignment", child),
    ? rule("rule_assignment_method_invocation", current_node."MethodInvocation_lfno_primary"),
    ? rule("rule_assignment_method_invocation", current_node."MethodInvocation")
}

// handle with an Assignment Expression : receives "Assignment"
"rule_assignment" -> {
    "ASSIGNMENT_STATEMENT" = {
        "ASSIGN_OPERATOR" = {
            "AssignmentOperator".child,
            "NAME" = {
                "LeftHandSide".last
            },
            "VALUE" = {
                ? rule("rule_assignment_value", "Expression".last.parent.parent),
                ? rule("rule_assignment_value_attr_call", "Expression".last.parent."ExpressionName")                               
            }
        }        
    }
}

// handle with the value for an Assignment : receives ("Expression", "AdditiveExpression", or "MultiplicativeExpression").last.parent.parent
"rule_assignment_value" -> {
    ? rule("rule_assignment_value_literal", current_node),
    ? "NAME" = {
        "ExpressionName".child
    },
    ? rule("rule_assignment_method_invocation", child."MethodInvocation_lfno_primary"),
    ? rule("rule_assignment_instantiates", child."ClassInstanceCreationExpression_lfno_primary"),
    ? rule("rule_math_expression", child),
    ? rule("rule_relational_expression", child),
    ? rule("rule_array__instantiates", child."ArrayCreationExpression"),
    ? rule("rule_array_initializer", "VariableInitializer"."ArrayInitializer")  
}

// handle with the initialization of an array like '{4, 2}' : receives "ArrayInitializer"
"rule_array_initializer" -> {
    "SEPARATOR" = {
        new_leaf("{")
    },
    ? rule("rule_initializer_list", "VariableInitializerList".children("VariableInitializer")),
    "SEPARATOR" = {
        new_leaf("}")
    }
}

// handle with each of the initializers in a list : receives "VariableInitializer"
"rule_initializer_list" -> {
    "VALUE" = {
        rule("rule_assignment_value", "Expression".last.parent.parent)
    }
}

// handle with the instantiation of an array : receives "ArrayCreationExpression"
"rule_array__instantiates" -> {
    "INSTANTIATES" = {
        "TYPE" = {
            "NAME" = {
                child(1).last
            }
        },
        "SEPARATOR" = {
            new_leaf("[")
        },
        rule("rule_assignment_value", "DimExprs".child."Expression".last.parent.parent),
        "SEPARATOR" = {
            new_leaf("]")
        }
    }    
}

// handle with relational expression : receives "Expression".last.parent
"rule_relational_expression" -> {
    ? rule("rule_equality_expression", "EqualityExpression"),
    ? rule("rule_more_equality_expression", "RelationalExpression")
}

// handle with a relational COMPARISON expression like x >= x : receives "RelationalExpression"
"rule_more_equality_expression" -> {
    "COMPARISON_OPERATOR" = {
        "RelationalOperator".child,
        // first part
        ? rule("rule_assignment_value", "RelationalExpression".last.parent.parent),
        ? rule("rule_assignment_value_attr_call", "RelationalExpression".last.parent."ExpressionName"),
        // second part
        ? rule("rule_assignment_value", "ShiftExpression".last.parent.parent),
        ? rule("rule_assignment_value_attr_call", "ShiftExpression".last.parent."ExpressionName")
    }  
}

// handle with a equality expression like x == y or x != y : receives "EqualityExpression"
"rule_equality_expression" -> {
    "COMPARISON_OPERATOR" = {
        "EqualityOperator".child,
        // first part
        ? rule("rule_assignment_value", "EqualityExpression".last.parent.parent),
        ? rule("rule_assignment_value_attr_call", "EqualityExpression".last.parent."ExpressionName"),
        // second part
        ? rule("rule_assignment_value", "RelationalExpression".last.parent.parent),
        ? rule("rule_assignment_value_attr_call", "RelationalExpression".last.parent."ExpressionName")
    }    
}

// handle with a reference to a object's field like x.y : receives "ExpressionName"
"rule_assignment_value_attr_call" -> {
    "NAME" = {
        "NAME" = {
            "AmbiguousName".child
        },
        new_leaf("."),
        "NAME" = {
            "ExpressionNameIdent".child
        }
    }
}

// handle with the order of operators for expressions : receives "Expression".last.parent
"rule_math_expression" -> {
    ? rule("rule_plus_minus_expression", "AdditiveExpression"),
    ? rule("rule_mult_div_expression", "MultiplicativeExpression")
}

// handle with a expression like x + y or x - y : receives "AdditiveExpression"
"rule_plus_minus_expression" -> {
    "OPERATOR" = {
        "MathOperatorSymbol".child,        
        // first part
        ? rule("rule_assignment_value", "AdditiveExpression".last.parent.parent),
        ? rule("rule_assignment_value_attr_call", "AdditiveExpression".last.parent."ExpressionName"),        
        // second part
        ? rule("rule_assignment_value", "MultiplicativeExpression".last.parent.parent),
        ? rule("rule_assignment_value_attr_call", "MultiplicativeExpression".last.parent."ExpressionName")
    }
}

// handle with a expression like x * y or x / y : receives "MultiplicativeExpression"
"rule_mult_div_expression" -> {
    "OPERATOR" = {
        "MathOperatorSymbol".child,        
        // first part
        ? rule("rule_assignment_value", "MultiplicativeExpression".last.parent.parent),
        ? rule("rule_assignment_value_attr_call", "MultiplicativeExpression".last.parent."ExpressionName"),        
        // second part
        ? rule("rule_assignment_value", "UnaryExpression".last.parent.parent),
        ? rule("rule_assignment_value_attr_call", "UnaryExpression".last.parent."ExpressionName")
    }
}

// handle with the creation of a new instance of a class such as new X() : receives "ClassInstanceCreationExpression_lfno_primary"
"rule_assignment_instantiates" -> {
    "INSTANTIATES" = {
        "TYPE" = {
            "NAME" = {
                "MethodNameComplex".child
            }
        }
    },
    "FUNCTION_CALL" = {
        "NAME" = {
            "TYPE" = {
                "NAME" = {
                    "MethodNameComplex".child
                }
            }
        },
        "ARGUMENT_LIST" = {
            "SEPARATOR" = {
                new_leaf("(")
            },
            ? rule("rule_assignment_method_arguments", "ArgumentList".children("Expression")),
            "SEPARATOR" = {
                new_leaf(")")
            }
        }
    }
}

// handle with a constant value (literal) from an Assignment : receives variable but has a "Literal" as a child
"rule_assignment_value_literal" -> {
    "CONST" = {
        "Literal".child
    }
}

// handle with a mothod call as the value for an Assignment : receives "MethodInvocation_lfno_primary"
"rule_assignment_method_invocation" -> {
    "FUNCTION_CALL" = {
        rule("rule_assignment_method_name", current_node),
        "ARGUMENT_LIST" = {
            "SEPARATOR" = {
                new_leaf("(")
            },
            ? rule("rule_assignment_method_arguments", "ArgumentList".children("Expression")),
            "SEPARATOR" = {
                new_leaf(")")
            }
        }
    }
}

// handle with the arguments of a method call : receives "Expression"
"rule_assignment_method_arguments" -> {
    "ARGUMENT" = {
        ? rule("rule_assignment_value", last.parent.parent),
        ? rule("rule_assignment_value_attr_call", last.parent."ExpressionName")
    }
}

// return the name of the method to be called : receives "MethodInvocation_lfno_primary"
"rule_assignment_method_name" -> {
    if (child(2) == :"MethodNameComplex"){
        "NAME" = {
            "NAME" = {
                rule("rule_import_name", "TypeName")
            },
            new_leaf("."),
            "NAME" = {
                "MethodNameComplex".child
            }
        }
    } else {
        "NAME" = {
            "MethodName".child
        }
    }    
}