// initial rule : receives "CONCRETE_UNIT_DECL"
"rule_concrete_unit" -> {
    new_leaf("public class"),
    "NAME".child,
    new_leaf("{"),
    ? rule("rule_attr_decl", children("ATTRIBUTE_DECL")),
    ? rule("rule_func_decl", children("FUNCTION_DECL")),
    new_leaf("}")
}

"rule_func_decl" -> {
    "MODIFIER_LIST".children,
    "TYPE".child,
    "NAME".child,
    new_leaf("("),
    ? rule("rule_parameter", "FORMAL_PARAM_LIST".children),
    new_leaf(")"),
    ? rule("rule_block_scope", "BLOCK_SCOPE")
}

"rule_block_scope" -> {
    new_leaf("{"),
    ? rule("rule_block_items", children),
    new_leaf("}")
}

"rule_block_items" -> {
    ? rule("rule_var_decl", current_node)
}

"rule_var_decl" -> {
    if (last_child == :"NAME"){
        "TYPE".last,
        "NAME".last
    } else {
        "TYPE".last,
        rule("rule_assignment_statement", "ASSIGNMENT_STATEMENT")
    },
    new_leaf(";")
}

"rule_assignment_statement" -> {
    rule("rule_assign_operator", "ASSIGN_OPERATOR")
}

"rule_assign_operator" -> {
    child(1).last,
    if (child(2) == :"SEPARATOR"){
        new_leaf("["),
        ? "CONST".child,
        new_leaf("]")
    },
    first_child.last,
    if (last_child == :"VALUE") {
        rule("rule_value", last_child)
    } else {
        if (last_child == :"CONST"){
            "CONST".child
        },
        if (last_child == :"SEPARATOR"){
            new_leaf("{"),
            ? rule("rule_list_value", children("VALUE")),
            new_leaf("}")
        },
        if (last_child == :"FUNCTION_CALL"){
            last_child."NAME".child,
            new_leaf("("),
            ? rule("rule_argmn_list", last_child."ARGUMENT_LIST"),
            new_leaf(")")
        }
    }
}

"rule_argmn_list" -> {
    rule("rule_arg", children)
}

"rule_arg" -> {
    ? rule("rule_expression", current_node)
}

"rule_expression" -> {
    ? rule("rule_instantiates", "INSTANTIATES"),
    ? rule("rule_operator", "OPERATOR"),
    if (first_child == :"CONST"){
        "CONST".child
    },
    if (last_child == :"SEPARATOR"){
        new_leaf("{"),
        ? rule("rule_list_value", children("VALUE")),
        new_leaf("}")
    },
    if (last_child == :"FUNCTION_CALL"){
        last_child."NAME".child,
        new_leaf("("),
        ? rule("rule_argmn_list", last_child."ARGUMENT_LIST"),
        new_leaf(")")
    }
}

"rule_operator" -> {
    
}

"rule_parameter" -> {
    rule("rule_parameter_aux", children)
}

"rule_parameter_aux" -> {
    last
}

"rule_attr_decl" -> {
    "MODIFIER_LIST".children,
    "TYPE".child,
    ? rule("rule_separators", children("SEPARATOR")),
    "NAME".child,
    ? rule("rule_aux_value", "VALUE".first_child),
    new_leaf(";")
}

"rule_separators" -> {
    child
}

"rule_aux_value" -> {
    new_leaf("="),
    rule("rule_value", parent)
}

"rule_value" -> {
    ? rule("rule_instantiates", "INSTANTIATES"),
    if (first_child == :"CONST"){
        "CONST".child
    },
    if (first_child == :"SEPARATOR"){
        new_leaf("{"),
        ? rule("rule_list_value", children("VALUE")),
        new_leaf("}")
    }
   
}

"rule_list_value" -> {
    last,
    new_leaf(",")
}

"rule_instantiates" -> {
    new_leaf("new"),
    first_child,
    if (last_child == :"SEPARATOR"){
        new_leaf("["),
        "CONST".child,
        new_leaf("]")
    }
}