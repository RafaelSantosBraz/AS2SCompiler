// first rule : receives "root"
"ruleinitial" -> {
    rule("rule_compilation_unit", children("CompilationUnit"))
}

// handle with each compilation unit : receives "CompilationUnit"
"rule_compilation_unit" -> {
    "COMPILATION_UNIT" = {
        "PACKAGE_DECL" = {
            "CONCRETE_UNIT_DECL" = {
                rule("rule_c_file", "TranslationUnit")                
            }
        }
    }
}

// handle with the concrete C file : receives "TranslationUnit"
"rule_c_file" -> {
    ? rule("rule_c_file", "TranslationUnit"),
    rule("rule_external_declaration", "ExternalDeclaration")
}

// handle with each of function or declaration definitions : receives "ExternalDeclaration"
"rule_external_declaration" -> {
    ? rule("rule_func_definition", "FunctionDefinition"),
    ? rule("rule_decl_definition", "Declaration")
}

// handle with the declaration of a function : receives "FunctionDefinition"
"rule_func_definition" -> {
    "FUNCTION_DECL" = {
        "TYPE" = {
            "TYPE" = {
                "DeclarationSpecifiers".last
            }
        },
        "NAME" = {
            "Declarator"."DirectDeclarator"."DirectDeclarator".child
        },
        "SEPARATOR" = {
            new_leaf("(")
        },
        ? "FORMAL_PARAM_LIST" = {
            rule("rule_params_list", "Declarator"."DirectDeclarator"."ParameterTypeList"."ParameterList")
        },        
        "SEPARATOR" = {
            new_leaf(")")
        },
        "BLOCK_SCOPE" = {
            "SEPARATOR" = {
                new_leaf("{")
            },
            ? rule("rule_block_scope", "CompoundStatement"."BlockItemList"),
            "SEPARATOR" = {
                new_leaf("}")
            }
        }
    }
}

// handle with the block scope of a function : receives "BlockItemList"
"rule_block_scope" -> {
    ? rule("rule_block_scope", "BlockItemList"),
    ? rule("rule_block_item", "BlockItem")
}

// handle with each of the block sope items : receives "BlockItem"
"rule_block_item" -> {
    ? rule("rule_statement", "Statement"),
    ? rule("rule_decl_definition", "Declaration")
}

// handle with each statement in a block : receives "Statement"
"rule_statement" -> {
    ? rule("rule_expression", "ExpressionStatement"."Expression"),
    ? rule("rule_", )
}

// handle with expressions : receives "Expression"
"rule_expression" -> {
    ? rule("rule_expression", "Expression"),
    ? rule("rule_assignment_expression", "AssignmentExpression")
}

// handle with an Assignment Expression : receives "AssignmentExpression"
"rule_assignment_expression" -> {
    
}

//handle with the list of parameters for a function : receives "ParameterList"
"rule_params_list" -> {    
    ? rule("rule_params_list", "ParameterList"),
    ? rule("rule_param_decl", "ParameterDeclaration")    
}

// handle with the conctrete declaration of a function's parameter : receives "ParameterDeclaration"
"rule_param_decl" -> {
    "PARAMETER_DECL" = {
        "TYPE" = {
            "TYPE" = {
                "DeclarationSpecifiers".last
            }
        },
        "NAME" = {
            "Declarator".last
        }
    }
}

// handle with global declarations : receives "Declaration"
"rule_decl_definition" -> {

}