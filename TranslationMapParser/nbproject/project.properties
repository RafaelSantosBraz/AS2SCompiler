annotation.processing.enabled=true
annotation.processing.enabled.in.editor=false
annotation.processing.processors.list=
annotation.processing.run.all.processors=true
annotation.processing.source.output=${build.generated.sources.dir}/ap-source-output
application.title=TranslationMapParser
application.vendor=rafin
build.classes.dir=${build.dir}/classes
build.classes.excludes=**/*.java,**/*.form
# This directory is removed when the project is cleaned:
build.dir=build
build.generated.dir=${build.dir}/generated
build.generated.sources.dir=${build.dir}/generated-sources
# Only compile against the classpath explicitly listed here:
build.sysclasspath=ignore
build.test.classes.dir=${build.dir}/test/classes
build.test.results.dir=${build.dir}/test/results
# Uncomment to specify the preferred debugger connection transport:
#debug.transport=dt_socket
debug.classpath=\
    ${run.classpath}
debug.test.classpath=\
    ${run.test.classpath}
# Os arquivos em build.classes.dir que devem ser exclu\u00eddos do jar de distribui\u00e7\u00e3o
dist.archive.excludes=
# This directory is removed when the project is cleaned:
dist.dir=dist
dist.jar=${dist.dir}/TranslationMapParser.jar
dist.javadoc.dir=${dist.dir}/javadoc
endorsed.classpath=
excludes=
includes=**
jar.compress=false
javac.classpath=\
    ${libs.ANTLR_4.6_complete.classpath}
# Space-separated list of extra javac options
javac.compilerargs=
javac.deprecation=false
javac.external.vm=true
javac.processorpath=\
    ${javac.classpath}
javac.source=1.8
javac.target=1.8
javac.test.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
javac.test.processorpath=\
    ${javac.test.classpath}
javadoc.additionalparam=
javadoc.author=false
javadoc.encoding=${source.encoding}
javadoc.noindex=false
javadoc.nonavbar=false
javadoc.notree=false
javadoc.private=false
javadoc.splitindex=true
javadoc.use=true
javadoc.version=false
javadoc.windowtitle=
main.class=translationmapparser.Run
manifest.file=manifest.mf
meta.inf.dir=${src.dir}/META-INF
mkdist.disabled=false
platform.active=default_platform
run.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
# Space-separated list of JVM arguments used when running the project.
# You may also define separate properties like run-sys-prop.name=value instead of -Dname=value.
# To set system properties for unit tests define test-sys-prop.name=value:
run.jvmargs=
run.test.classpath=\
    ${javac.test.classpath}:\
    ${build.test.classes.dir}
source.encoding=UTF-8
src.dir=src
test.src.dir=test

# ***********************
# * ANTLR V4 properties *
# ***********************
# You may set a project relative path or an abolute path to antlr4 ant task jar
# Normally, you should not change this value that points to your project antlr4
# ant task library
antlr.ant.task.jar=nbproject/antext/ANTLRAntTask-1.2.jar
antlr.ant.task.antlr.runtime.jar=${libs.ANTLR_4.6_runtime.classpath}

# You can set an absolute directory path or a project relative path
antlr.generator.src.dir=grammar

# comma-separated or whitespace-separated list of excluded grammar files
# (from the directory antlr.generator.src.dir so here only file names relative
#  to that directory)
antlr.generator.src.excluded=

# Optional directory where ANTLR will look for grammar files and token files
# All files in that directory will be ignored by code generation launched by
# antlr4 task.
# If you delete default grammar/imports directory, because you do not need it,
# then do not forget to define next property to an empty value
antlr.generator.import.dir=grammar/imports

# Where your lexer / parser code will be located
antlr.generator.dest.dir=${build.generated.sources.dir}/antlr4

# This property defines the ANTLR library that will be used for generating
# Java code from your grammars.
# You can set this property with :
# - NetBeans library repository: ${libs.ANTLR_4.6_complete.classpath} or any
#   other version you have installed in your NETBeans library repository,
# - An ANTLR complete library of your choice defined by an absolute path  
#   pointing typically outside project directory,
# - the antlr 4.6 complete library deployed in your project library repository: 
#   lib/antlr-4.6-complete.jar (recommended because it enables your project to
#   continue to work even if you uninstall NetBeans),
# - empty property that will lead to use the library called project library.
# Whatever choice, you have made, if no library is found, the antlr4 task will fail.
antlr.generator.jar=${libs.ANTLR_4.6_complete.classpath}

# required for running your generated parser
antlr.runtime.jar=${libs.ANTLR_4.6_runtime.classpath}

# defines if ANTLR will generate a listener or not (default value=true)
antlr.generator.option.code.listener=false

# defines if ANTLR will generate a listener or not (default value=false)
antlr.generator.option.code.visitor=true

# defines the package of generated classes
# If you use this option (or if you put a Java package statement in 
# the grammar header) do not forget to place grammars in the 
# corresponding subdirectories of ${antlr.generator.dest.dir} as if they 
# where a Java source. You do not have to modiify antlr.generator.dest.dir.
antlr.generator.option.code.package=

# defines if ANTLR will generate DOT graph files that represent the internal
# augmented transition network (ATN) data structures that ANTLR uses to represent
# grammars (default value=false)
antlr.generator.option.atn=false
